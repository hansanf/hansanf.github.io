<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>test_in_mac</title>
    <link href="/2022/05/04/test-in-mac/"/>
    <url>/2022/05/04/test-in-mac/</url>
    
    <content type="html"><![CDATA[<p>a test for mac hexo<br>second test</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>git_usage</title>
    <link href="/2021/11/26/git-usage/"/>
    <url>/2021/11/26/git-usage/</url>
    
    <content type="html"><![CDATA[<h3 id="git在线练习平台"><a href="#git在线练习平台" class="headerlink" title="git在线练习平台"></a>git在线练习平台</h3><p><a href="https://learngitbranching.js.org/">https://learngitbranching.js.org</a></p><p><a href="https://mp.weixin.qq.com/s/sp1YUQ2vnQaIGH4tO3j1Vw">git常用命令和基本概念</a></p><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><h4 id="全局配置文件"><a href="#全局配置文件" class="headerlink" title="全局配置文件"></a>全局配置文件</h4><p>全局配置文件有<code>~/.gitconfig</code>和<code>~/.git-credentials</code>两个</p><p><code>~/.gitconfig</code>对应着<code>git config --global</code>命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">//查<br>git config --global --list<br> <br>git config --global user.name<br> <br>//增<br>git config  --global --add user.name fgq<br> <br>//删<br>git config  --global --<span class="hljs-built_in">unset</span> user.name<br> <br>//改<br>git config --global user.name fgq<br></code></pre></td></tr></table></figure><p>比如修改GitHub账号名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config  --global  user.name hansanf<br></code></pre></td></tr></table></figure><p><code>~/.gitconfig</code>文件就会相应的做出修改<br><img src="https://img-blog.csdnimg.cn/6e26501083b945e1a65f2c225387b949.png" alt="在这里插入图片描述"></p><p><code>~/.git-credentials</code>中文是资格证书，里面保存github的token，使每次登陆都可以免密。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">https://GitHub用户名:具体的token@github.com<br></code></pre></td></tr></table></figure><h4 id="局部配置文件"><a href="#局部配置文件" class="headerlink" title="局部配置文件"></a>局部配置文件</h4><p>在使用 <code>git init 文件目录</code>命令配置的git工作区中，即<code>文件目录/.git/config</code>，是局部配置文件，对应着<code>git config --local</code>命令。</p><p><code>.gitignore</code>也是只对当前工作区起作用，可以把要忽略的文件名填进去，然后Git就会自动忽略这些文件</p><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 忽略所有.开头的隐藏文件:</span><br>.*<br><span class="hljs-comment"># 忽略所有.class文件:</span><br>*.class<br><br><span class="hljs-comment"># 不忽略.gitignore和App.class:</span><br>!.gitignore<br>!App.class<br></code></pre></td></tr></table></figure><p>参考：<br><a href="https://blog.csdn.net/themagickeyjianan/article/details/79683980?spm=1001.2014.3001.5506">修改git config配置文件</a></p><p><a href="https://blog.csdn.net/Lakers2015/article/details/111990909">Git 中的.gitignore文件的作用及配置</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>环境变量</title>
    <link href="/2021/11/25/linux-environment-path/"/>
    <url>/2021/11/25/linux-environment-path/</url>
    
    <content type="html"><![CDATA[<h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><h3 id="三个文件"><a href="#三个文件" class="headerlink" title="三个文件"></a>三个文件</h3><h4 id="1-etc-profile"><a href="#1-etc-profile" class="headerlink" title="1. /etc/profile"></a>1. <code>/etc/profile</code></h4><p>系统级别，可以所有用户起作用，网上有说是在用户登录时读取的。但在我电脑上使用<code>source /etc/profile</code>后只在当前终端起作用，新建终端仍不生效，为了以后在每个终端上都生效可以在<code>~/.bashrc</code>中添加<code>source /etc/profile</code>。<br>注意<code>~/.bashrc</code>和<code>/etc/profile</code>中还包括对终端其他方面的设置，比如显示格式、颜色</p><h4 id="2-etc-environment"><a href="#2-etc-environment" class="headerlink" title="2. /etc/environment"></a>2. <code>/etc/environment</code></h4><p>系统级别，应该是专门用于设置环境变量的，据说优先级高于<code>/etc/profile</code>，没验证过。</p><h4 id="3-bashrc"><a href="#3-bashrc" class="headerlink" title="3. ~/.bashrc"></a>3. <code>~/.bashrc</code></h4><p>只对当前用户生效，在个人电脑上直接修改这个文件即可，简单省事。</p><h3 id="环境变量书写格式"><a href="#环境变量书写格式" class="headerlink" title="环境变量书写格式"></a>环境变量书写格式</h3><p>最好在文件末尾添加</p><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 其他内容</span><br>PATH=<span class="hljs-variable">$PATH</span>:/usr/local/bin:/usr/bin<br></code></pre></td></tr></table></figure><p><code>PATH</code>表示环境变量，等号两边不要有空格（shell语法，赋值时等号两边不能有空格）<br><code>$PATH</code>表示取变量值，即如果上面定义了<code>PATH</code>，可以直接引用上面定义好的环境变量，所以这也是为什么要加在文件末尾<br><code>:</code>为分隔符，每一个环境变量的路径都要用<code>:</code>分开</p><p>上面这段代码等价于</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#其他内容</span><br>PATH=<span class="hljs-variable">$PATH</span>:/usr/local/bin<br>PATH=<span class="hljs-variable">$PATH</span>:/usr/bin<br></code></pre></td></tr></table></figure><p>修改好后，使用source使其生效</p><h3 id="3-export命令"><a href="#3-export命令" class="headerlink" title="3.export命令"></a>3.export命令</h3><p>export命令使环境变量在当前终端生效，关闭终端后失效。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:环境变量路径<br></code></pre></td></tr></table></figure><p>注意，一定要加上<code>$PATH</code>,否则会使已有的环境变量全都失效，只剩下新添加的</p>]]></content>
    
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ln命令</title>
    <link href="/2021/11/25/cmd-ln/"/>
    <url>/2021/11/25/cmd-ln/</url>
    
    <content type="html"><![CDATA[<h3 id="ln命令"><a href="#ln命令" class="headerlink" title="ln命令"></a>ln命令</h3><h4 id="格式和参数"><a href="#格式和参数" class="headerlink" title="格式和参数"></a>格式和参数</h4><p>语法格式： ln [参数] <strong>[源</strong>文件或目录] [<strong>目标</strong>文件或目录]</p><table><thead><tr><th>参数</th><th>全称</th><th>作用</th></tr></thead><tbody><tr><td>空</td><td>hard</td><td>对源文件建立硬链接</td></tr><tr><td>-s</td><td>soft</td><td>对源文件建立软连接（符号链接）</td></tr><tr><td>-f</td><td>force</td><td>强制创建链接，即使目标文件已经存在</td></tr><tr><td>-b</td><td>backup</td><td>强制创建链接，即使目标文件已经存在</td></tr><tr><td>-i</td><td>Interactive</td><td>交互模式，若目标文件已经存在，则提示用户确认进行覆盖</td></tr><tr><td>-v</td><td>verbose</td><td>详细信息模式，输出指令的详细执行过程</td></tr><tr><td>-d</td><td>direction</td><td>此选项允许“root”用户建立目录的硬链接</td></tr></tbody></table><h4 id="软连接、硬链接和拷贝的区别"><a href="#软连接、硬链接和拷贝的区别" class="headerlink" title="软连接、硬链接和拷贝的区别"></a>软连接、硬链接和拷贝的区别</h4><p><strong>软连接：</strong></p><ul><li>链接文件内存储的是原文件的inode，也就是说是用来指向原文件文件，这<strong>两个文件的inode是不一样</strong>的</li><li>软链接以路径的形式存在，类似于Windows操作系统中的快捷方式。</li><li>删除软链接的链接文件，被链接文件不会受到任何影响，但是修改软链接文件内容，被链接文件内容也会被修改</li><li>软链接可以跨文件系统 ，硬链接不可以。</li><li>软链接可以对一个不存在的文件名进行链接，硬链接不可以。</li><li>软链接可以对目录进行链接，硬链接不可以。</li><li>删除软链接的被链接文件，链接文件会变成红色，这时打开链接文件会报错，报找不到被链接的文件这种错误</li></ul><p><strong>硬连接：</strong><br>-硬链接实际上是为文件建一个别名，链接文件和原文件实际上是同一个文件，这两个文件的<strong>inode号是同一个</strong>（ls -i）</p><ul><li>硬链接以文件副本的形式存在，但不占用实际空间。</li><li>硬链接不允许普通用户给目录创建硬链接。</li><li>硬链接只有在同一个文件系统中才能创建。</li></ul><blockquote><p>A硬链B 删除B后A依然存在，且可用。<br>A软链B 删除B后A存在，但不可用了（相当于Windows下快捷方式指向的目标不存在了）</p></blockquote><p><strong>拷贝：</strong></p><ul><li>拷贝产生的文件是一个独立的文件，有自己的元信息和inode节点</li></ul><blockquote><p> 软连接和硬链接在使用时用哪一个，主要看是否需要链接目录，是否依赖相对路径，没有限制条件两者应该都可以使用。</p></blockquote><p>参考：<br><a href="https://www.linuxcool.com/ln">linux命令大全</a><br><a href="https://blog.csdn.net/geerniya/article/details/79093301">软链接、硬链接与复制的区别</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++可变参数</title>
    <link href="/2021/11/24/variable-arguments/"/>
    <url>/2021/11/24/variable-arguments/</url>
    
    <content type="html"><![CDATA[<h3 id="参数列表的…"><a href="#参数列表的…" class="headerlink" title="参数列表的…"></a>参数列表的…</h3><p>… 表示函数的参数个数可变，典型的如<code>printf()</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">printf</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> * szFormat, ...)</span></span>;<br></code></pre></td></tr></table></figure><p>第一个参数是一个格式化字符串，后面是与格式化字符串中的代码相对应的不同类型的多个参数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">char</span>* name = <span class="hljs-string">&quot;fgq&quot;</span>;<br><span class="hljs-type">int</span> age = <span class="hljs-number">18</span>; <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;info &#123;name:%s, age:%d&#125;\n&quot;</span>,name, age) ; <br></code></pre></td></tr></table></figure><h3 id="使用…实现变参数函数的两种场景"><a href="#使用…实现变参数函数的两种场景" class="headerlink" title="使用…实现变参数函数的两种场景"></a>使用…实现变参数函数的两种场景</h3><h4 id="1-格式化字符串"><a href="#1-格式化字符串" class="headerlink" title="1. 格式化字符串"></a>1. 格式化字符串</h4><blockquote><p><strong>使用场景：</strong><br>类似于实现一个printf，输入一串格式化的字符串，经过处理后可以将 %s %f %d等占位符替换为对应的数据。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">char</span>* <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* format, va_list ap)</span>  </span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">char</span>* buf = <span class="hljs-literal">nullptr</span>;<br>    <span class="hljs-keyword">auto</span> len = <span class="hljs-built_in">vasprintf</span>(&amp;buf, format, ap); <br>    <span class="hljs-keyword">if</span>(len == <span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-keyword">return</span> buf;<br>    &#125;<br>    <span class="hljs-keyword">return</span> buf; <br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">char</span>* <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* format, ...)</span>  <span class="hljs-comment">// 重载了func函数，不重载也行</span></span><br><span class="hljs-function"></span>&#123;<br>    va_list ap;<br>    <span class="hljs-type">char</span> *res = <span class="hljs-literal">NULL</span>; <br>    <span class="hljs-built_in">va_start</span>(ap, format);<br>    res = <span class="hljs-built_in">func</span>(format, ap);  <br>    <span class="hljs-built_in">va_end</span>(ap);<br>    <span class="hljs-keyword">return</span> res ;  <br>&#125;   <br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">char</span>* name = <span class="hljs-string">&quot;fgq&quot;</span>;<br>    <span class="hljs-type">int</span> age = <span class="hljs-number">18</span>; <br>    <span class="hljs-type">char</span>* str = <span class="hljs-built_in">func</span>(<span class="hljs-string">&quot;info &#123;name:%s, age:%d&#125;\n&quot;</span>,name, age) ;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;result: %s \n&quot;</span>, str) ; <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">输出结果<br>result: info &#123;name:fgq, age:<span class="hljs-number">18</span>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong><br>上面func()函数重载了，如果不是类成员函数，要注意函数定义的顺序，在func(const char* format, …)里要调用<code>func(const char* format, va_list ap)</code> ，因此<code>func(const char* format, ...)</code>要定义在后面。类内成员函数则可以是任意顺序。</p></blockquote><p>实际上完成占位符替换为数据的是<code>int vasprintf (char **buf, const char *format, va_list ap)</code>函数：<br><code>buf</code>：一个用于保存结果的字符串缓冲区<br><code>format</code>：一个格式化字符串<br><code>ap</code>:va_list类型的变量, va_list是一个宏，和va_start(va_list, arg)、va_arg(va_list, type)、va_end(va_list)这些宏在定义在头文件stdarg.h中，下面详细介绍通过这些宏来实现可变参数函数</p><h4 id="2-执行时指定可变参数类型"><a href="#2-执行时指定可变参数类型" class="headerlink" title="2.执行时指定可变参数类型"></a>2.执行时指定可变参数类型</h4><blockquote><p><strong>使用场景：</strong><br>将n个数进行相加，此时n是不确定的，如果用重载方法，可能要重载很多次，如下面的例子</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp">例子：<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> i1, <span class="hljs-type">int</span> i2)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> i1, <span class="hljs-type">int</span> i2, <span class="hljs-type">int</span> i3)</span></span>;<br>...<span class="hljs-comment">//还需要重载更多类似函数</span><br> <br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">sum</span><span class="hljs-params">(<span class="hljs-type">double</span> d1, <span class="hljs-type">double</span> d2)</span></span>;<br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">sum</span><span class="hljs-params">(<span class="hljs-type">double</span> d1, <span class="hljs-type">double</span> d2, <span class="hljs-type">double</span> d3)</span></span>;<br>...<span class="hljs-comment">//还需要重载更多类似函数</span><br></code></pre></td></tr></table></figure><p>使用可变参数的方法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> count, ...)</span> </span>&#123;  <span class="hljs-comment">//格式:count代表参数个数, ...代表n个参数</span><br> <br>va_list ap;  <span class="hljs-comment">//声明一个va_list变量</span><br><span class="hljs-built_in">va_start</span>(ap, count);  <span class="hljs-comment">//第二个参数表示形参的个数</span><br> <br><span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; count; i++) &#123; <span class="hljs-comment">// 按顺序返回参数列表中的参数</span><br>res += <span class="hljs-built_in">va_arg</span>(ap, <span class="hljs-type">int</span>);   <span class="hljs-comment">//第二个参数表示形参类型</span><br>&#125;<br><br><span class="hljs-built_in">va_end</span>(ap);  <span class="hljs-comment">//用于清理</span><br> <br><span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> res = <span class="hljs-built_in">sum</span>(<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>);<br>    cout&lt;&lt;res&lt;&lt;endl; <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">输出结果：<br>6<br></code></pre></td></tr></table></figure><h3 id="使用initializer-list实现变参函数"><a href="#使用initializer-list实现变参函数" class="headerlink" title="使用initializer_list实现变参函数"></a>使用initializer_list实现变参函数</h3><p><code>initializer_list</code>是一个列表初始化容器，声明在initializer_list头文件中，可以采用迭代器的方式来遍历参数列表，克服了<code>...</code>需要指定参数个数的缺点。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">initializerSum</span><span class="hljs-params">(initializer_list&lt;<span class="hljs-type">int</span>&gt; il)</span> </span>&#123;<br>   <br><span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br> <br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> ptr = il.<span class="hljs-built_in">begin</span>(); ptr != il.<span class="hljs-built_in">end</span>(); ptr++)  <span class="hljs-comment">//类似于容器的操作</span><br>&#123;<br>sum += *ptr;<br>&#125;<br> <br><span class="hljs-keyword">return</span> sum;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> res = <span class="hljs-built_in">initializerSum</span>(&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;) ;  <span class="hljs-comment">// 初始化 initializer_list&lt;int&gt;</span><br>    cout&lt;&lt;res&lt;&lt;endl; <br><br>    std::initializer_list&lt;<span class="hljs-type">int</span>&gt; il &#123;<span class="hljs-number">1</span>&#125; ;<br>    res = <span class="hljs-built_in">initializerSum</span>(il);<br>    cout&lt;&lt;res&lt;&lt;endl; <br><br>    <span class="hljs-function">std::initializer_list&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">ill</span> <span class="hljs-params">(&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&#125;)</span> </span>;<br>    res = <span class="hljs-built_in">initializerSum</span>(ill);<br>    cout&lt;&lt;res&lt;&lt;endl; <br>    <br>    <span class="hljs-keyword">auto</span> illl = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;;<br>    res = <span class="hljs-built_in">initializerSum</span>(illl);<br>    cout&lt;&lt;res&lt;&lt;endl;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span> ; <br>&#125;<br></code></pre></td></tr></table></figure><p>参考：<br><a href="http://en.cppreference.com/w/cpp/utility/initializer_list">cppreference对inittializer_list的介绍</a></p><p><a href="https://blog.csdn.net/baidu_15952103/article/details/105886761">va_list函数学习（va_start，va_end, vasprintf）</a></p><p><a href="https://blog.csdn.net/alex1997222/article/details/78639991">C++可变参数的两种方法</a></p><p><a href="https://blog.csdn.net/anye3000/article/details/6593551">printf,sprintf,vsprintf 区别</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C/C++宏的使用技巧</title>
    <link href="/2021/11/23/marco-tips/"/>
    <url>/2021/11/23/marco-tips/</url>
    
    <content type="html"><![CDATA[<h3 id="宏的使用技巧"><a href="#宏的使用技巧" class="headerlink" title="宏的使用技巧"></a>宏的使用技巧</h3><blockquote><p>1、在带参宏定义中，形式参数不分配内存单元，因此不必作类型定义<br>2、\ 用来换行<br>3、 # 把变量变为字符串</p></blockquote><h4 id="1-在switch中使代码更简洁"><a href="#1-在switch中使代码更简洁" class="headerlink" title="1.在switch中使代码更简洁"></a>1.在switch中使代码更简洁</h4><figure class="highlight cpp"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">string <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-type">int</span> level)</span></span>&#123;<br><span class="hljs-keyword">switch</span>(level)&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> XX(i,name) \</span><br><span class="hljs-meta">case i: \</span><br><span class="hljs-meta">return name; \</span><br><span class="hljs-meta"></span><br><span class="hljs-built_in">XX</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;DEBUG&quot;</span>) ; <br><span class="hljs-built_in">XX</span>(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;INFO&quot;</span>) ;<br><span class="hljs-built_in">XX</span>(<span class="hljs-number">3</span>,<span class="hljs-string">&quot;WARN&quot;</span>) ;<br><span class="hljs-built_in">XX</span>(<span class="hljs-number">4</span>,<span class="hljs-string">&quot;ERROR&quot;</span>) ;<br><span class="hljs-built_in">XX</span>(<span class="hljs-number">5</span>,<span class="hljs-string">&quot;FATAL&quot;</span>) ;<br><span class="hljs-meta">#<span class="hljs-keyword">undef</span> XX</span><br><span class="hljs-keyword">default</span>:<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;UNKNOW&quot;</span> ; <br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;UNKNOW&quot;</span> ; <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-把变量变为字符串"><a href="#2-把变量变为字符串" class="headerlink" title="2.#把变量变为字符串"></a>2.#把变量变为字符串</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> STRING(x) (#x)</span><br>cout&lt;&lt;<span class="hljs-built_in">STRING</span>(<span class="hljs-number">1</span>)&lt;&lt;endl;<br><span class="hljs-type">int</span> a = <span class="hljs-number">1000</span> ; <br>cout&lt;&lt;<span class="hljs-built_in">STRING</span>(a)&lt;&lt;endl; <br>cout&lt;&lt;<span class="hljs-built_in">STRING</span>(b)&lt;&lt;endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span> ; <br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css">输出结果：<br><span class="hljs-number">1</span><br><span class="hljs-selector-tag">a</span><br><span class="hljs-selector-tag">b</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>CPP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>模板模式</title>
    <link href="/2021/11/19/template_pattern/"/>
    <url>/2021/11/19/template_pattern/</url>
    
    <content type="html"><![CDATA[<h3 id="模板模式"><a href="#模板模式" class="headerlink" title="模板模式"></a>模板模式</h3><p><strong>意图:</strong> 定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。</p><p><strong>主要解决:</strong> 一些方法通用，却在每一个子类都重新写了这一方法。</p><blockquote><p><strong>例子</strong><br>建造房子的流程都是一样的，比如：打地基-&gt;砌砖头-&gt;盖屋顶<br>但是不同种类的房子，比如茅草房和别墅，在这三个步骤中所要做的具体事情不一样<br>此时就可以应用模板模式，在接口类（基类）中抽象出统一的流程，在子类中再重写具体步骤的方法。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></div></td><td class="code"><pre><code class="hljs cpp"><br>```cpp<br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std ; <br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">IGame</span>&#123;  <span class="hljs-comment">// 接口类</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">initialize</span><span class="hljs-params">()</span></span>&#123;&#125;;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">startPlay</span><span class="hljs-params">()</span></span>&#123;&#125;;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">endPlay</span><span class="hljs-params">()</span></span>&#123;&#125;;<br><br>    <span class="hljs-comment">//模板：固定不变的部分，定义统一的游戏流程</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">play</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-built_in">initialize</span>();<br>        <span class="hljs-built_in">startPlay</span>();<br>        <span class="hljs-built_in">endPlay</span>(); <br>    &#125;<br><br>    <span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">IGame</span>()&#123;&#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Basketball</span>:<span class="hljs-keyword">public</span> IGame&#123;  <br><span class="hljs-keyword">public</span>:  <span class="hljs-comment">// 重写接口类中游戏流程中的具体方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">initialize</span><span class="hljs-params">()</span></span>&#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;Basketball initialize&quot;</span>&lt;&lt;endl; <br>    &#125;;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">startPlay</span><span class="hljs-params">()</span></span>&#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;Basketball startPlay&quot;</span>&lt;&lt;endl;<br>    &#125;;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">endPlay</span><span class="hljs-params">()</span></span>&#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;Basketball endPlay&quot;</span>&lt;&lt;endl ; <br>    &#125;;<br><br>    <span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">Basketball</span>()&#123;&#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Football</span>:<span class="hljs-keyword">public</span> IGame&#123;<br><span class="hljs-keyword">public</span>:  <span class="hljs-comment">// 重写接口类中游戏流程中的具体方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">initialize</span><span class="hljs-params">()</span></span>&#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;Football initialize&quot;</span>&lt;&lt;endl; <br>    &#125;;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">startPlay</span><span class="hljs-params">()</span></span>&#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;Football startPlay&quot;</span>&lt;&lt;endl;<br>    &#125;;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">endPlay</span><span class="hljs-params">()</span></span>&#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;Football endPlay&quot;</span>&lt;&lt;endl ; <br>    &#125;;<br><br>    <span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">Football</span>()&#123;&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    IGame *pb ;  <br>    Basketball basketball ; <br>    Football Football ; <br>    pb = &amp;basketball ; <br>    pb-&gt;<span class="hljs-built_in">play</span>() ; <br>    pb = &amp;Football ; <br>    pb-&gt;<span class="hljs-built_in">play</span>() ; <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">打印输出：<br><br><span class="hljs-keyword">Basketball </span>initialize<br><span class="hljs-keyword">Basketball </span>startPlay<br><span class="hljs-keyword">Basketball </span>endPlay<br>Football initialize<br>Football startPlay<br>Football endPlay<br></code></pre></td></tr></table></figure><hr><p><strong>总结：</strong><br>模板模式在类库的设计中很常见，在模板模式中，库设计者会给使用者提供固定的流程和需要重写的接口，使用者通常只需要：<br>1、继承父类；<br>2、重写某一个或某几个接口；<br>3、调用包含了所有流程的方法，比如<code>play()</code></p>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式的设计原则和分类</title>
    <link href="/2021/11/19/design-pattern-priciple-classification/"/>
    <url>/2021/11/19/design-pattern-priciple-classification/</url>
    
    <content type="html"><![CDATA[<h2 id="设计模式的设计原则和分类"><a href="#设计模式的设计原则和分类" class="headerlink" title="设计模式的设计原则和分类"></a>设计模式的设计原则和分类</h2><h3 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h3><h4 id="1、依赖倒置原则（DIP）"><a href="#1、依赖倒置原则（DIP）" class="headerlink" title="1、依赖倒置原则（DIP）"></a>1、依赖倒置原则（DIP）</h4><ul><li>高层模块（稳定）不应该依赖于底层模块（变化），二者都应该依赖于抽象（稳定）。</li><li>抽象（稳定）不应该依赖于实现细节（变化），实现细节应该依赖于抽象（稳定）。</li></ul><h4 id="2、开放封闭原则（OCP）"><a href="#2、开放封闭原则（OCP）" class="headerlink" title="2、开放封闭原则（OCP）"></a>2、开放封闭原则（OCP）</h4><ul><li>对扩展开放，对更改封闭。</li><li>类模块应该是可扩展的，但是不可修改。</li></ul><h4 id="3、单一职责原则（SRP）"><a href="#3、单一职责原则（SRP）" class="headerlink" title="3、单一职责原则（SRP）"></a>3、单一职责原则（SRP）</h4><ul><li>一个类应该仅有一个引起他变化的原因。</li><li>变化的方向隐含着类的责任。</li></ul><h4 id="4、Liskov替换原则（LSP）"><a href="#4、Liskov替换原则（LSP）" class="headerlink" title="4、Liskov替换原则（LSP）"></a>4、Liskov替换原则（LSP）</h4><ul><li>子类必须能够替换他们的基类（IS-A）。</li><li>继承表达类型抽象。</li></ul><h4 id="5、接口隔离原则（ISP）"><a href="#5、接口隔离原则（ISP）" class="headerlink" title="5、接口隔离原则（ISP）"></a>5、接口隔离原则（ISP）</h4><ul><li>不应该强迫客户程序依赖他们不用的方法。</li><li>接口应该小而完备。</li></ul><h4 id="6、迪米特洛原则（最少知识原则）"><a href="#6、迪米特洛原则（最少知识原则）" class="headerlink" title="6、迪米特洛原则（最少知识原则）"></a>6、迪米特洛原则（最少知识原则）</h4><ul><li>一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立</li><li>优先使用对象组合，而不是类继承。类继承通常为“白箱复用”，对象组合通常为“黑箱复用”。继承在某种程度上破坏了封装性，子类父类耦合度高。而对象组合则只要求被组合的对象具有良好定义的接口，耦合度低。</li></ul><h4 id="7、封装变化点"><a href="#7、封装变化点" class="headerlink" title="7、封装变化点"></a>7、封装变化点</h4><ul><li>使用封装来创建对象之间的分解层，让设计者可以在分层的一侧进行修改，而不会对另一侧产生不良的影响，减少层次间的耦合。</li></ul><h4 id="8、针对接口（抽象类）编程，而不是针对实现编程"><a href="#8、针对接口（抽象类）编程，而不是针对实现编程" class="headerlink" title="8、针对接口（抽象类）编程，而不是针对实现编程"></a>8、针对接口（抽象类）编程，而不是针对实现编程</h4><ul><li>不将变量类型生命为某个特定的具体类，而是声明为某个接口。</li><li>客户程序无须获知对象的具体类型，只需要知道对象所具有的接口。</li><li>减少系统中各部分的依赖关系，从而实现“高内聚、松耦合”。</li><li>和依赖倒置原则相辅相成。</li></ul><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>三分类：<a href="https://www.runoob.com/design-pattern/design-pattern-intro.html">https://www.runoob.com/design-pattern/design-pattern-intro.html</a></p><p>李建忠老师的九分类：</p><table><thead><tr><th>模式分类</th><th>包括</th></tr></thead><tbody><tr><td><strong>组件协作</strong></td><td>模板模式<br>策略模式<br>观察者模式</td></tr><tr><td><strong>单一职责</strong></td><td>装饰者模式<br> 桥接模式</td></tr><tr><td><strong>对象创建</strong></td><td>工厂模式<br>抽象工厂模式<br>原型模式<br>建造者模式</td></tr><tr><td><strong>对象性能</strong></td><td>单例模式<br>享元模式</td></tr><tr><td><strong>接口隔离</strong></td><td>门面模式<br>代理模式<br>适配器模式<br>中介者模式</td></tr><tr><td><strong>状态变化</strong></td><td>状态模式<br>备忘录模式</td></tr><tr><td><strong>数据结构</strong></td><td>组合模式<br>迭代器模式<br>职责链模式</td></tr><tr><td><strong>行为变化</strong></td><td>命令模式<br>访问器模式</td></tr><tr><td><strong>领域问题</strong></td><td>解析器模式</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vscode_opencv</title>
    <link href="/2021/11/12/vscode-opencv/"/>
    <url>/2021/11/12/vscode-opencv/</url>
    
    <content type="html"><![CDATA[<h3 id="win10-vscode-加载opencv库"><a href="#win10-vscode-加载opencv库" class="headerlink" title="win10 vscode 加载opencv库"></a>win10 vscode 加载opencv库</h3><p>从头到尾的配置：<br>1、Visual Studio Code 配置<br>2、openCV 配置<br>3、MinGw 配置<br>4、cmake 配置<br>完整过程参考：<a href="https://blog.csdn.net/zhaiax672/article/details/88971248">https://blog.csdn.net/zhaiax672/article/details/88971248</a></p><p>如果使用vscode已经可以编译c++程序了，即可以省略掉大部分vscode和的MinGW的配置过程（只要vscode中配置好opencv的头文件路径和库路径即可）</p><p>opencv的配置过程，实际上就是库的加载过程，如果是已经编译好的opencv库，只要配置好头文件路径和库文件路径即可，如果是下载的源文件，则需要通过cmake进行编译。<br>cmake编译opencv参考：<a href="https://blog.csdn.net/zhaiax672/article/details/88971248">https://blog.csdn.net/zhaiax672/article/details/88971248</a></p><p>opencv已经编译好了之后，把头文件路径和库文件路径加到系统的环境变量中。</p><p>最后配置vscode的三个.json文件：<code>launch.json</code>、<code>tasks.json</code>、<code>c_cpp_properties.json</code></p><p>各自的配置如下：<br><code>launch.json</code>：主要注意<strong>miDebuggerPath</strong>和<strong>program</strong>两项</p><figure class="highlight yaml"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><pre><code class="hljs yaml">&#123;<br>    <span class="hljs-string">//</span> <span class="hljs-string">Use</span> <span class="hljs-string">IntelliSense</span> <span class="hljs-string">to</span> <span class="hljs-string">learn</span> <span class="hljs-string">about</span> <span class="hljs-string">possible</span> <span class="hljs-string">attributes.</span><br>    <span class="hljs-string">//</span> <span class="hljs-string">Hover</span> <span class="hljs-string">to</span> <span class="hljs-string">view</span> <span class="hljs-string">descriptions</span> <span class="hljs-string">of</span> <span class="hljs-string">existing</span> <span class="hljs-string">attributes.</span><br>    <span class="hljs-string">//</span> <span class="hljs-string">For</span> <span class="hljs-string">more</span> <span class="hljs-string">information</span>, <span class="hljs-attr">visit:</span> <span class="hljs-string">https://go.microsoft.com/fwlink/?linkid=830387</span><br>    <span class="hljs-attr">&quot;version&quot;:</span> <span class="hljs-string">&quot;0.2.0&quot;</span>,<br>    <span class="hljs-attr">&quot;configurations&quot;:</span> [<br>        <br>        <br>        &#123;<br>            <span class="hljs-attr">&quot;name&quot;:</span> <span class="hljs-string">&quot;(gdb) Launch&quot;</span>,<br>            <span class="hljs-attr">&quot;type&quot;:</span> <span class="hljs-string">&quot;cppdbg&quot;</span>,<br>            <span class="hljs-attr">&quot;request&quot;:</span> <span class="hljs-string">&quot;launch&quot;</span>,<br>            <span class="hljs-attr">&quot;program&quot;:</span> <span class="hljs-string">&quot;$&#123;workspaceFolder&#125;/$&#123;fileBasenameNoExtension&#125;.o&quot;</span>,<br>            <span class="hljs-attr">&quot;args&quot;:</span> [],<br>            <span class="hljs-attr">&quot;stopAtEntry&quot;:</span> <span class="hljs-literal">false</span>,<br>            <span class="hljs-attr">&quot;cwd&quot;:</span> <span class="hljs-string">&quot;$&#123;workspaceFolder&#125;&quot;</span>,<br>            <span class="hljs-attr">&quot;environment&quot;:</span> [],<br>            <span class="hljs-attr">&quot;externalConsole&quot;:</span> <span class="hljs-literal">true</span>,<br>            <span class="hljs-attr">&quot;MIMode&quot;:</span> <span class="hljs-string">&quot;gdb&quot;</span>,<br>            <span class="hljs-attr">&quot;miDebuggerPath&quot;:</span> <span class="hljs-string">&quot;C:/Program Files/mingw-w64/x86_64-5.3.0-posix-seh-rt_v4-rev0/mingw64/bin/gdb.exe&quot;</span>,<br>            <span class="hljs-attr">&quot;preLaunchTask&quot;:</span> <span class="hljs-string">&quot;g++&quot;</span>,<br>            <span class="hljs-attr">&quot;setupCommands&quot;:</span> [<br>                &#123;<br>                    <span class="hljs-attr">&quot;description&quot;:</span> <span class="hljs-string">&quot;Enable pretty-printing for gdb&quot;</span>,<br>                    <span class="hljs-attr">&quot;text&quot;:</span> <span class="hljs-string">&quot;-enable-pretty-printing&quot;</span>,<br>                    <span class="hljs-attr">&quot;ignoreFailures&quot;:</span> <span class="hljs-literal">true</span><br>                &#125;<br>            ]<br>        &#125;,<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure><p><code>tasks.json</code>：<br>主要修改<strong>args</strong>中大i、大L和小l<br>这里实际上就是g++ -I 头文件路径 -L 库文件路径 -l 库文件名<br>注意实际库文件的命名和这里写库文件名的区别   实际库文件名&#x3D;lib库文件名.dll.a</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs yaml">&#123;<br>    <span class="hljs-string">//</span> <span class="hljs-string">See</span> <span class="hljs-string">https://go.microsoft.com/fwlink/?LinkId=733558</span><br>    <span class="hljs-string">//</span> <span class="hljs-string">for</span> <span class="hljs-string">the</span> <span class="hljs-string">documentation</span> <span class="hljs-string">about</span> <span class="hljs-string">the</span> <span class="hljs-string">tasks.json</span> <span class="hljs-string">format</span><br>    <span class="hljs-attr">&quot;version&quot;:</span> <span class="hljs-string">&quot;2.0.0&quot;</span>,<br>    <span class="hljs-attr">&quot;command&quot;:</span> <span class="hljs-string">&quot;g++&quot;</span>,<br>    <span class="hljs-attr">&quot;args&quot;:</span> [<br>        <span class="hljs-string">&quot;-g&quot;</span>, <br>        <span class="hljs-string">&quot;-std=c++11&quot;</span>, <br>        <span class="hljs-string">&quot;$&#123;file&#125;&quot;</span>, <br>        <span class="hljs-string">&quot;-o&quot;</span>, <br>        <span class="hljs-string">&quot;$&#123;fileBasenameNoExtension&#125;.o&quot;</span>,  <br>        <span class="hljs-string">&quot;-I&quot;</span>, <span class="hljs-string">&quot;D:\\Program Files\\opencv\\opencv\\build\\include&quot;</span>,<br>        <span class="hljs-string">&quot;-I&quot;</span>, <span class="hljs-string">&quot;D:\\Program Files\\opencv\\opencv\\build\\include\\opencv2&quot;</span>,<br>        <span class="hljs-string">&quot;-I&quot;</span>, <span class="hljs-string">&quot;D:\\Program Files\\opencv\\opencv\\build\\include\\opencv&quot;</span>,<br>        <span class="hljs-string">&quot;-L&quot;</span>, <span class="hljs-string">&quot;D:\\Program Files\\opencv\\opencv\\build\\x64\\MinGW\\lib&quot;</span>,<br>        <span class="hljs-string">&quot;-l&quot;</span>,<span class="hljs-string">&quot;opencv_core3416&quot;</span>,<br>        <span class="hljs-string">&quot;-l&quot;</span>,<span class="hljs-string">&quot;opencv_dnn3416&quot;</span>, <br>        <span class="hljs-string">&quot;-l&quot;</span>,<span class="hljs-string">&quot;opencv_features2d3416&quot;</span>, <br>        <span class="hljs-string">&quot;-l&quot;</span>,<span class="hljs-string">&quot;opencv_flann3416&quot;</span>, <br>        <span class="hljs-string">&quot;-l&quot;</span>,<span class="hljs-string">&quot;opencv_highgui3416&quot;</span>, <br>        <span class="hljs-string">&quot;-l&quot;</span>,<span class="hljs-string">&quot;opencv_imgcodecs3416&quot;</span>,<br>        <span class="hljs-string">&quot;-l&quot;</span>,<span class="hljs-string">&quot;opencv_imgproc3416&quot;</span>,<br>        <span class="hljs-string">&quot;-l&quot;</span>,<span class="hljs-string">&quot;opencv_ml3416&quot;</span>, <br>        <span class="hljs-string">&quot;-l&quot;</span>,<span class="hljs-string">&quot;opencv_objdetect3416&quot;</span>, <br>        <span class="hljs-string">&quot;-l&quot;</span>,<span class="hljs-string">&quot;opencv_photo3416&quot;</span>, <br>        <span class="hljs-string">&quot;-l&quot;</span>,<span class="hljs-string">&quot;opencv_shape3416&quot;</span>, <br>        <span class="hljs-string">&quot;-l&quot;</span>,<span class="hljs-string">&quot;opencv_stitching3416&quot;</span>,<br>        <span class="hljs-string">&quot;-l&quot;</span>,<span class="hljs-string">&quot;opencv_superres3416&quot;</span>, <br>        <span class="hljs-string">&quot;-l&quot;</span>,<span class="hljs-string">&quot;opencv_video3416&quot;</span>, <br>        <span class="hljs-string">&quot;-l&quot;</span>,<span class="hljs-string">&quot;opencv_videoio3416&quot;</span>, <br>        <span class="hljs-string">&quot;-l&quot;</span>,<span class="hljs-string">&quot;opencv_videostab3416&quot;</span>,<br>        <span class="hljs-string">&quot;-l&quot;</span>,<span class="hljs-string">&quot;opencv_ts3416&quot;</span><br><br>  <br>    ],<span class="hljs-string">//</span> <span class="hljs-string">编译命令参数</span><br>    <span class="hljs-string">&quot;problemMatcher&quot;</span><span class="hljs-string">:</span>&#123;<br>        <span class="hljs-attr">&quot;owner&quot;:</span> <span class="hljs-string">&quot;cpp&quot;</span>,<br>        <span class="hljs-string">&quot;fileLocation&quot;</span><span class="hljs-string">:</span>[<br>            <span class="hljs-string">&quot;relative&quot;</span>,<br>            <span class="hljs-string">&quot;$&#123;workspaceFolder&#125;&quot;</span><br>        ],<br>        <span class="hljs-string">&quot;pattern&quot;</span><span class="hljs-string">:</span>[<br>            &#123;<br>                <span class="hljs-attr">&quot;regexp&quot;:</span> <span class="hljs-string">&quot;^([^\\\\s].*)\\\\((\\\\d+,\\\\d+)\\\\):\\\\s*(.*)$&quot;</span>,<br>                <span class="hljs-attr">&quot;file&quot;:</span> <span class="hljs-number">1</span>,<br>                <span class="hljs-attr">&quot;location&quot;:</span> <span class="hljs-number">2</span>,<br>                <span class="hljs-attr">&quot;message&quot;:</span> <span class="hljs-number">3</span><br>            &#125;<br>        ]<br>    &#125;,<br>    <span class="hljs-attr">&quot;group&quot;:</span> &#123;<br>        <span class="hljs-attr">&quot;kind&quot;:</span> <span class="hljs-string">&quot;build&quot;</span>,<br>        <span class="hljs-attr">&quot;isDefault&quot;:</span> <span class="hljs-literal">true</span><br>    &#125;<br>  &#125;<br>  <br></code></pre></td></tr></table></figure><p><code>c_cpp_properties.json</code>：<br>主要修改<strong>includePath</strong>和<strong>compilerPath</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs yaml">&#123;<br>    <span class="hljs-attr">&quot;configurations&quot;:</span> [<br>        &#123;<br>            <span class="hljs-attr">&quot;name&quot;:</span> <span class="hljs-string">&quot;win&quot;</span>,<br>            <span class="hljs-attr">&quot;includePath&quot;:</span> [<br>                <span class="hljs-string">&quot;$&#123;workspaceFolder&#125;/**&quot;</span>,<br>                <span class="hljs-string">&quot;D:\\Program Files\\opencv\\opencv\\build\\include&quot;</span>,<br>                <span class="hljs-string">&quot;D:\\Program Files\\opencv\\opencv\\build\\include\\opencv2&quot;</span>,<br>                <span class="hljs-string">&quot;D:\\Program Files\\opencv\\opencv\\build\\include\\opencv&quot;</span>         <br>            ],<br>            <span class="hljs-attr">&quot;defines&quot;:</span> [],<br>            <span class="hljs-attr">&quot;compilerPath&quot;:</span> <span class="hljs-string">&quot;C:/Program Files/mingw-w64/x86_64-5.3.0-posix-seh-rt_v4-rev0/mingw64/bin/gcc.exe&quot;</span>,<br>            <span class="hljs-attr">&quot;cStandard&quot;:</span> <span class="hljs-string">&quot;c11&quot;</span>,<br>            <span class="hljs-attr">&quot;cppStandard&quot;:</span> <span class="hljs-string">&quot;c++17&quot;</span>,<br>            <span class="hljs-attr">&quot;intelliSenseMode&quot;:</span> <span class="hljs-string">&quot;clang-x64&quot;</span><br>        &#125;<br>    ],<br>    <span class="hljs-attr">&quot;version&quot;:</span> <span class="hljs-number">4</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>如果不是完全照搬上述的配置，需要注意：</p><ul><li><code>launch.json</code>的<strong>preLaunchTask</strong>和<code>tasks.json</code>中的<strong>label</strong>内容需要一致，否则报错，比如修改<code>launch.json</code>的<strong>preLaunchTask</strong>为g++.exe，则会报错<br><img src="https://img-blog.csdnimg.cn/0539074e59fe455882f429a521c318b4.png" alt="在这里插入图片描述"><br>三个json文件的作用：<br><code>tasks.json</code> (build instructions)<br><code>launch.json</code> (debugger settings)<br><code>c_cpp_properties.json</code> (compiler path and IntelliSense settings</li></ul><p>vscode配置官方教程：<a href="https://code.visualstudio.com/docs/cpp/config-mingw">https://code.visualstudio.com/docs/cpp/config-mingw</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>vscode</tag>
      
      <tag>opencv</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式之类图表示</title>
    <link href="/2021/11/07/UML/"/>
    <url>/2021/11/07/UML/</url>
    
    <content type="html"><![CDATA[<h3 id="类图属性"><a href="#类图属性" class="headerlink" title="类图属性"></a>类图属性</h3><p>一个大矩形里面分三层：</p><ul><li>类名</li><li>成员名：可见性 名称 ：类型 [ &#x3D; 默认值]</li><li>方法名：可见性  名称(参数列表) [ ： 返回类型]<br><img src="https://img-blog.csdnimg.cn/c59f02761f6b4d5c926297de49d48cfa.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcXFx55av5ZWm55av5ZWm,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></li></ul><p>可见性：</p><ul><li>+：表示public</li><li>-：表示private</li><li>#：表示protected（friendly也归入这类）</li></ul><h3 id="类之间关系"><a href="#类之间关系" class="headerlink" title="类之间关系"></a>类之间关系</h3><h4 id="1、依赖"><a href="#1、依赖" class="headerlink" title="1、依赖"></a>1、依赖</h4><p>依赖关系使用<strong>带箭头的虚线</strong>来表示，箭头从使用类指向被依赖的类。</p><p><strong>人依赖手机：</strong><br><img src="https://img-blog.csdnimg.cn/f53bd1f094a946b9a8121fe7f7c3beb9.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcXFx55av5ZWm55av5ZWm,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>依赖（Dependency）关系是一种<strong>使用关系</strong>，它是对象之间耦合度最弱的一种关联方式，被使用对象的有无，不影响使用对象，是临时性的关联。</p><h4 id="2、关联"><a href="#2、关联" class="headerlink" title="2、关联"></a>2、关联</h4><p>依赖关系使用<strong>带箭头的实线</strong>来表示，箭头从使用类指向被关联的类，可以单向关联，也可以双向关联。</p><p>双向的关联可以用带两个箭头或者没有箭头的实线来表示，单向的关联用带一个箭头的实线来表示。</p><p><strong>老师和学生双向关联：</strong>每个老师可以教多个学生，每个学生也可向多个老师学<br><img src="https://img-blog.csdnimg.cn/59ed529d91fb40fcb133824a7fc0f59b.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcXFx55av5ZWm55av5ZWm,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>关联（Association）关系是对象之间的一种<strong>引用关系</strong>，用于表示一类对象与另一类对象之间的联系，如老师和学生、师傅和徒弟、丈夫和妻子等。被引用者不存在时，引用者可以存在，但是没有意义。</p><h4 id="3、聚合"><a href="#3、聚合" class="headerlink" title="3、聚合"></a>3、聚合</h4><p>聚合关系可以用<strong>带空心菱形的实线</strong>来表示，菱形指向整体。</p><p><strong>大学包含教师：</strong><br><img src="https://img-blog.csdnimg.cn/5979cb34f002423bb819274d3a3798d0.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcXFx55av5ZWm55av5ZWm,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>聚合（Aggregation）关系是关联关系的一种，是强关联关系，是<strong>整体和部分之间的关系</strong>，是 has-a 的关系。当部分类不存在，整体类也不能存在，但是部分可以脱离整体而独立存在。比如大学不能脱离教师而存在，但是没有大学教师依然能够独立存在。</p><h4 id="4、组合"><a href="#4、组合" class="headerlink" title="4、组合"></a>4、组合</h4><p>组合关系用<strong>带实心菱形的实线来表示</strong>，菱形指向整体<br><strong>头和嘴：</strong><br><img src="https://img-blog.csdnimg.cn/9accac46ce1d4eb382cdf8d1c00623b6.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcXFx55av5ZWm55av5ZWm,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>在组合关系中，整体对象可以控制部分对象的生命周期，一旦整体对象不存在，部分对象也将不存在，部分对象也不能脱离整体对象而存在。例如，头和嘴的关系，没有了头，嘴也就不存在了。</p><h4 id="5、泛化"><a href="#5、泛化" class="headerlink" title="5、泛化"></a>5、泛化</h4><p>泛化关系用<strong>带空心三角箭头的实线</strong>来表示，箭头从子类指向父类。</p><p><strong>人和学生、老师：</strong><br><img src="https://img-blog.csdnimg.cn/b27b8f34dcfd4134b179533991d8d045.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcXFx55av5ZWm55av5ZWm,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>泛化（Generalization）关系是对象之间耦合度最大的一种关系，表示一般与特殊的关系，是<strong>父类与子类之间的关系，是一种继承关系</strong>，是 is-a 的关系。</p><h4 id="6、实现"><a href="#6、实现" class="headerlink" title="6、实现"></a>6、实现</h4><p>实现关系使用<strong>带空心三角箭头的虚线来表示</strong>，箭头从实现类指向接口</p><p><strong>鸟和飞：</strong><br><img src="https://img-blog.csdnimg.cn/2380c43ba2dc4c07b395882e3930059c.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcXFx55av5ZWm55av5ZWm,size_15,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>实现（Realization）关系是<strong>接口与实现类之间的关系</strong>。在这种关系中，类实现了接口，类中的操作实现了接口中所声明的所有的抽象操作。可以将实现类看做方法。</p><p>参考：<br><a href="https://www.cnblogs.com/shindo/p/5579191.html">https://www.cnblogs.com/shindo/p/5579191.html</a><br><a href="https://blog.csdn.net/sinat_21107433/article/details/102576624">https://blog.csdn.net/sinat_21107433&#x2F;article&#x2F;details&#x2F;102576624</a><br><a href="http://c.biancheng.net/view/1319.html">http://c.biancheng.net/view/1319.html</a><br><a href="https://www.jianshu.com/p/641682f9c918">https://www.jianshu.com/p/641682f9c918</a></p>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>update_nodejs</title>
    <link href="/2021/11/01/update-nodejs/"/>
    <url>/2021/11/01/update-nodejs/</url>
    
    <content type="html"><![CDATA[<h2 id="Ubuntu升级nodejs"><a href="#Ubuntu升级nodejs" class="headerlink" title="Ubuntu升级nodejs"></a>Ubuntu升级nodejs</h2><h3 id="下载nodejs压缩文件"><a href="#下载nodejs压缩文件" class="headerlink" title="下载nodejs压缩文件"></a>下载nodejs压缩文件</h3><p>打开nodejs官网，打开<code>DOWNLOADS</code>页面，选择一个版本，右键复制链接地址，然后使用命令</p><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">wget https://nodejs.org/dist/v16.13.0/node-v16.13.0-linux-x64.tar.xz <br></code></pre></td></tr></table></figure><p>下载到本地</p><h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tar -xvf v16.13.0/node-v16.13.0-linux-x64.tar.xz <br></code></pre></td></tr></table></figure><h3 id="将node和npm设置为全局"><a href="#将node和npm设置为全局" class="headerlink" title="将node和npm设置为全局"></a>将node和npm设置为全局</h3><p>将新的node可执行文件<strong>硬链接</strong>到&#x2F;usr&#x2F;local&#x2F;bin&#x2F;node,如果提示连接已存在，可将&#x2F;usr&#x2F;local&#x2F;bin&#x2F;node删掉，再重新连接(删除前建议先备份)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">ln</span> 解压后路径/node-v16.13.0-linux-x64/bin/node /usr/local/bin/node<br> <br>sudo <span class="hljs-built_in">ln</span> 解压后路径/node-v16.13.0-linux-x64/bin/npm /usr/local/bin/npm  <br></code></pre></td></tr></table></figure><p><strong>&#x2F;bin&#x2F;usr和&#x2F;bin&#x2F;local&#x2F;usr的区别：</strong><br>&amp;emsp;&amp;emsp; &#x2F;usr&#x2F;bin下面的都是系统预装的可执行程序，会随着系统升级而改变。<br>&amp;emsp;&amp;emsp; &#x2F;usr&#x2F;local&#x2F;bin目录是给用户放置自己的可执行程序的地方，推荐放在这里，不会被系统升级而覆盖同名文件。<br>&amp;emsp;&amp;emsp; &#x2F;如果两个目录下有相同的可执行程序，谁优先执行受到PATH环境变量的影响</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">fgq@ubuntu:~/hexo_blog$ <span class="hljs-built_in">echo</span> <span class="hljs-variable">$PATH</span><br>/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin<br></code></pre></td></tr></table></figure><p>&amp;emsp;&amp;emsp; 这里&#x2F;usr&#x2F;local&#x2F;bin优先于&#x2F;usr&#x2F;bin, 一般都是如此</p><p><strong>另外一种设为全局的方法：使用别名alias</strong> </p><p>当前终端生效：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">alias</span> node=解压后路径/node-v16.13.0-linux-x64/bin/node<br><span class="hljs-built_in">alias</span> npm=解压后路径/node-v16.13.0-linux-x64/bin/npm<br></code></pre></td></tr></table></figure><p>永久生效：<br>&amp;emsp;&amp;emsp;修改主目录下.bashrc文件(~&#x2F;.bashrc)，添加上述两句<br>&amp;emsp;&amp;emsp; 然后 <code>source  ~/.bashrc</code><br><strong>note:</strong> 等号两边没有空格 </p><blockquote><p>node和nodejs之间没有区别，node全称就是nodejs。nodejs是一个基于Chrome V8引擎的JavaScript运行环境</p></blockquote><p>参考：<br><a href="https://blog.csdn.net/qq_37035946/article/details/99451703">1、https://blog.csdn.net/qq_37035946&#x2F;article&#x2F;details&#x2F;99451703</a><br><a href="https://blog.csdn.net/nzjdsds/article/details/88345400">2、https://blog.csdn.net/nzjdsds/article/details/88345400</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux_tips</title>
    <link href="/2021/11/01/linux-tips/"/>
    <url>/2021/11/01/linux-tips/</url>
    
    <content type="html"><![CDATA[<h3 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h3><p>for linux tips </p>]]></content>
    
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++类和对象的内存布局</title>
    <link href="/2021/11/01/cpp-memory-layout/"/>
    <url>/2021/11/01/cpp-memory-layout/</url>
    
    <content type="html"><![CDATA[<h3 id="用g-查看内存布局的方法："><a href="#用g-查看内存布局的方法：" class="headerlink" title="用g++查看内存布局的方法："></a>用g++查看内存布局的方法：</h3><p>&amp;emsp;&amp;emsp;g++版本&gt;8.0：<code>g++ -fdump-lang-class vptr.cpp</code><br>&amp;emsp;&amp;emsp;g++版本&lt;8.0：<code>g++ -fdump-class-hierarchy vptr.cpp</code><br><a href="https://blog.csdn.net/Ineedapassward/article/details/118417116">参考：https://blog.csdn.net/Ineedapassward/article/details/118417116</a></p><h3 id="类的内存布局"><a href="#类的内存布局" class="headerlink" title="类的内存布局"></a>类的内存布局</h3><p><a href="https://blog.csdn.net/shichao1470/article/details/91563282">参考：https://blog.csdn.net/shichao1470/article/details/91563282</a></p><h3 id="菱形继承下对象的内存布局"><a href="#菱形继承下对象的内存布局" class="headerlink" title="菱形继承下对象的内存布局"></a>菱形继承下对象的内存布局</h3><p><a href="https://blog.csdn.net/j4ya_/article/details/80177897">参考：https://blog.csdn.net/j4ya_&#x2F;article&#x2F;details&#x2F;80177897</a></p><h3 id="菱形继承下类的内存布局"><a href="#菱形继承下类的内存布局" class="headerlink" title="菱形继承下类的内存布局"></a>菱形继承下类的内存布局</h3><figure class="highlight cpp"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><pre><code class="hljs cpp"><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base</span>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span></span>&#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;Base::func()&quot;</span>&lt;&lt;endl; <br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">X</span>: <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">public</span> Base&#123;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span></span>&#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;X::func()&quot;</span>&lt;&lt;endl; <br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Y</span>: <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">public</span> Base&#123;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span></span>&#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;Y::func()&quot;</span>&lt;&lt;endl; <br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">funcY</span><span class="hljs-params">()</span></span>&#123;&#125;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Z</span>: <span class="hljs-keyword">public</span> X,  <span class="hljs-keyword">public</span> Y&#123;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span></span>&#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;Z::func()&quot;</span>&lt;&lt;endl; <br>    &#125;<br>&#125;;<br><br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    cout&lt;&lt;<span class="hljs-built_in">sizeof</span>(Base)&lt;&lt;endl<br>        &lt;&lt;<span class="hljs-built_in">sizeof</span>(X)&lt;&lt;endl<br>        &lt;&lt;<span class="hljs-built_in">sizeof</span>(Y)&lt;&lt;endl<br>        &lt;&lt;<span class="hljs-built_in">sizeof</span>(Z)&lt;&lt;endl ; <br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>64位系统下运行，sizeof(int *) 等于8，输出结果为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">8<br>8<br>8<br>16<br></code></pre></td></tr></table></figure><p><strong>问题：</strong><br>&amp;emsp;&amp;emsp;类Base的size为8，是因为有一个虚表指针，<br>&amp;emsp;&amp;emsp;类X和类Y的size也为8，也是因为各自只有一个虚表指针？<br>&amp;emsp;&amp;emsp;类Z的size为16，是为甚？不采用虚继承的时候结果不变，为甚？<br>使用g++查看内存布局，结果如下：</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">Vtable <span class="hljs-keyword">for</span> Z<br>Z::_ZTV1Z: <span class="hljs-number">6</span> entries<br><span class="hljs-number">0</span>     (int <span class="hljs-comment">(*)(...))0</span><br><span class="hljs-comment">8     (int (*)</span>(...))(&amp; _ZTI1Z)<br><span class="hljs-number">16</span>    (int <span class="hljs-comment">(*)(...))Z::func</span><br><span class="hljs-comment">24    (int (*)</span>(...))-<span class="hljs-number">8</span><br><span class="hljs-number">32</span>    (int <span class="hljs-comment">(*)(...))(&amp; _ZTI1Z)</span><br><span class="hljs-comment">40    (int (*)</span>(...))Z::_ZThn8_N1Z4funcEv<br><br><span class="hljs-keyword">Class</span> Z<br>   size=<span class="hljs-number">16</span> align=<span class="hljs-number">8</span><br>   base size=<span class="hljs-number">16</span> base align=<span class="hljs-number">8</span><br>Z (<span class="hljs-number">0</span>x0x3feb780) <span class="hljs-number">0</span><br>    vptr=((&amp; Z::_ZTV1Z) + <span class="hljs-number">16</span>)<br>  X (<span class="hljs-number">0</span>x0x3feb7c0) <span class="hljs-number">0</span> nearly-<span class="hljs-keyword">empty</span><br>      primary-<span class="hljs-keyword">for</span> Z (<span class="hljs-number">0</span>x0x3feb780)<br>    Base (<span class="hljs-number">0</span>x0x3fdca48) <span class="hljs-number">0</span> nearly-<span class="hljs-keyword">empty</span><br>        primary-<span class="hljs-keyword">for</span> X (<span class="hljs-number">0</span>x0x3feb7c0)<br>  Y (<span class="hljs-number">0</span>x0x3feb800) <span class="hljs-number">8</span> nearly-<span class="hljs-keyword">empty</span><br>      vptr=((&amp; Z::_ZTV1Z) + <span class="hljs-number">40</span>)<br>    Base (<span class="hljs-number">0</span>x0x3fdca80) <span class="hljs-number">8</span> nearly-<span class="hljs-keyword">empty</span><br>        primary-<span class="hljs-keyword">for</span> Y (<span class="hljs-number">0</span>x0x3feb800)<br></code></pre></td></tr></table></figure><p>为啥</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Y</span> (<span class="hljs-number">0</span>x0x3feb800) <span class="hljs-number">8</span> nearly-empty<br>    <span class="hljs-attribute">vptr</span>=((&amp; Z::_ZTV1Z) + <span class="hljs-number">40</span>)<br>  <span class="hljs-attribute">Base</span> (<span class="hljs-number">0</span>x0x3fdca80) <span class="hljs-number">8</span> nearly-empty<br>      <span class="hljs-attribute">primary</span>-for Y (<span class="hljs-number">0</span>x0x3feb800)<br></code></pre></td></tr></table></figure><p>这里是什么东西啊？</p>]]></content>
    
    
    
    <tags>
      
      <tag>CPP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>error_non_const_lvalue</title>
    <link href="/2021/10/31/error-non-const-lvalue/"/>
    <url>/2021/10/31/error-non-const-lvalue/</url>
    
    <content type="html"><![CDATA[<h4 id="error：cannot-bind-non-const-lvalue-reference-of-type-‘xxx-amp-‘-to-an-rvalue-of-type-‘xxx‘"><a href="#error：cannot-bind-non-const-lvalue-reference-of-type-‘xxx-amp-‘-to-an-rvalue-of-type-‘xxx‘" class="headerlink" title="error：cannot bind non-const lvalue reference of type ‘xxx&amp;‘ to an rvalue of type ‘xxx‘"></a>error：cannot bind non-const lvalue reference of type ‘xxx&amp;‘ to an rvalue of type ‘xxx‘</h4><p>非常量左值引用不能赋给右值</p><figure class="highlight cpp"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><pre><code class="hljs cpp"><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base</span>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Base</span>()&#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;Base()&quot;</span>&lt;&lt;endl ; <br>    &#125;; <br>    <span class="hljs-built_in">Base</span>(<span class="hljs-type">const</span> Base &amp;other)&#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;Base(Base &amp;other)&quot;</span>&lt;&lt;endl ; <br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span></span>&#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;Base::func()&quot;</span>&lt;&lt;endl; <br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    Base b0 ; <br>    <span class="hljs-comment">// 三种调用拷贝构造创建对象的方式</span><br>    <span class="hljs-function">Base <span class="hljs-title">b1</span><span class="hljs-params">(b0)</span> </span>;  <br>    Base b2 = b0 ; <br>    Base b3 = <span class="hljs-built_in">Base</span>(b0) ;   <span class="hljs-comment">// 当拷贝构造函数为 Base(Base &amp;other) 而不是Base(const Base &amp;other)时，报错</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>原因：</strong><br>&amp;emsp;&amp;emsp;如果一个参数是以非const引用传入，c++编译器就有理由认为程序员会在函数中修改这个值，并且这个被修改的引用在函数返回后要发挥作用。但如果你把一个临时变量当作非const引用参数传进来，由于临时变量的特殊性，程序员并不能操作临时变量，而且临时变量随时可能被释放掉，所以，一般说来，修改一个临时变量是毫无意义的，据此，<strong>c++编译器加入了临时变量不能作为非const引用的这个语义限制。</strong></p><p><a href="https://blog.csdn.net/digitalkee/article/details/105092400">参考：https://blog.csdn.net/digitalkee/article/details/105092400</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>CPP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>缺少模板参数列表</title>
    <link href="/2021/10/28/template_typename_T/"/>
    <url>/2021/10/28/template_typename_T/</url>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/da1fd3f3cf3244ecac3814f3e1ed0f0f.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcXFx55av5ZWm55av5ZWm,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">class</span>  <span class="hljs-title class_">vector</span><br>&#123;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-comment">/* data */</span><br><span class="hljs-keyword">public</span>:<br>     <span class="hljs-built_in">vector</span>(<span class="hljs-comment">/* args */</span>);<br>    ~ <span class="hljs-built_in">vector</span>();<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">push_back</span><span class="hljs-params">( T <span class="hljs-type">const</span>&amp; )</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">clear</span><span class="hljs-params">()</span></span>;<br>&#125;;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;  <span class="hljs-comment">// 不加这一行 会报错：“缺少模板参数列表”</span><br><span class="hljs-type">void</span> vector&lt;T&gt;::<span class="hljs-built_in">clear</span>()&#123;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>参考 <a href="https://blog.csdn.net/u013891092/article/details/51583666/">https://blog.csdn.net/u013891092/article/details/51583666/</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>CPP</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
